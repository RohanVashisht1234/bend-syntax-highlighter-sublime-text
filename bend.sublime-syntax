%YAML 1.2
---
name: bend
file_extensions:
  - bend
scope: source.bend

contexts:
  main:
    # All the keywords
    - match: \b(def|switch|case|return|if|else|when|match|Î»|Some|data|let|use|object|fold|open|do|bind|Name|identity|Bool|ask|with)\b
      scope: keyword.control.bend
    # All the operator type of keywords
    - match: \b(bend|None|Nil|Result|type)\b
      scope: entity.name.bend
    # Highlighting for functions:
    - match: \b[a-zA-Z]+\s*(?=\()
      scope: entity.name.function.bend
    - match: (?<=\bdef\s)\w+
      scope: entity.name.function.bend
    - match: (?<=\bdata\s)\w+
      scope: entity.name.constant.bend
    - match: (?<=\blet\s)\w+
      scope: entity.name.constant.bend
    - match: (?<=\bSome\s)\w+
      scope: entity.name.constant.bend
    - match: (?<=\s*\.)\w+
      name: entity.name.constant.bend
    - match: \w+(?=\s*=)
      name: entity.name.constant.bend
    - match: (?<=\bbend\s)\w+
      scope: entity.name.constant.bend
    - match: (?<=\bobject\s)\w+
      scope: entity.name.constant.bend
    - match: (?<=\bfold\s)\w+
      scope: entity.name.constant.bend
    - match: (?<=\bopen\s)\w+
      scope: entity.name.constant.bend
    - match: (?<=\bdo\s)\w+
      scope: entity.name.constant.bend
    - match: (?<=\bidentity\s)\w+
      scope: entity.name.constant.bend
    - match: (?<=\blambda\s)\w+
      scope: entity.name.constant.bend
    - match: '"'
      scope: punctuation.definition.string.begin.bend
      push: double_quoted_string
    - match: "'"
      scope: punctuation.definition.string.begin.bend
      push: single_quote_string
    - match: '#'
      scope: punctuation.definition.comment.bend
      push: line_comment
    - match: \b\d+\b
      scope: constant.numeric.bend
    - match: \b\d+\.\d+\b
      scope: constant.numeric.bend
    - match: \b\d{1,3}(?:_\d{3})*\b
      scope: constant.numeric.bend
    - match: \b(\+|-|\*|/|!)\b
      scope: keyword.operator.bend

  double_quoted_string:
    - meta_scope: string.quoted.double.bend
    - match: '\\.'
      scope: constant.character.escape.bend
    - match: '"'
      scope: punctuation.definition.string.end.bend
      pop: true
  line_comment:
    - meta_scope: comment.line.bend
    - match: $
      pop: true
  single_quote_string:
    - meta_scope: string.quoted.single.bend
    - match: '\\.'
      scope: constant.character.escape.bend
    - match: "'"
      scope: punctuation.definition.string.end.bend
      pop: true
